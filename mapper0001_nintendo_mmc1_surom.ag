/*
SUROM:
Dragon Quest IV, Dragon Warrior III, Dragon Warrior IV, Ninjara Hoi!
SXROM:
Best Play Pro Yakyuu Special, Final Fantasy I & II
*/
board <- {
	mappernum = 1, vram_mirrorfind = false, ppu_ramfind = false,
	cpu_rom = {
		size_base = 4 * mega, size_max = 4 * mega,
		banksize = 0x4000, 
	}, 
	cpu_ram = {
		size_base = 0x2000, size_max = 0x8000,
		banksize = 0x2000
	},
	ppu_rom = {
		size_base = 0, size_max = 0,
		banksize = 0x1000, 
	}
};

dofile("mmc1.ai");

function cpu_dump(d, pagesize, banksize)
{
	cpu_write(d, 0x8000, 0x80); //serial count reset
	mmc1_write(d, 0x8000, 0x0c); //CPU/PPU bank configuration
	for(local i = 0; i < pagesize; i += 0x10){
		mmc1_write(d, 0xa000, (i & 0x10) | 1);
		for(local j = 0; j < 0x10 - 1; j += 1){
			mmc1_write(d, 0xe000, j | 0x10);
			cpu_read(d, 0x8000, banksize);
		}
		cpu_read(d, 0xc000, banksize);
	}
}

/*
http://nesdevwiki.org/wiki/SXROM
 CHR bank 0 (internal, $A000-$BFFF)
4bit0
-----
PSSxC
||| |
||| +- Select 4 KB CHR RAM bank at PPU $0000 (ignored in 8 KB mode)
|++--- Select 8 KB PRG RAM bank
+----- Select 256 KB PRG ROM bank
*/

function cpu_ram_access(d, pagesize, banksize)
{
	local sxrom_page = [0, 2 << 2, 1 << 2, 3 << 2];
	cpu_write(d, 0x8000, 0x80); //serial count reset
	mmc1_write(d, 0x8000, 1 << 3);
	mmc1_write(d, 0xe000, 0);
	for(local i = 0; i < pagesize; i += 1){
//		mmc1_write(d, 0xa000, (i & 0x03) << 2);
		mmc1_write(d, 0xa000, sxrom_page[i]);
		cpu_ramrw(d, 0x6000, banksize);
	}
	mmc1_write(d, 0xe000, 0xff);
}

/*
SUROM SXROM CPU memory bank
cpu address|rom address    |page|task
--SNROM area -- even ----------------
$8000-$bfff|n * 0x4000|even 0x00|write 0x2aaa + write area
$c000-$ffff|0x3c000-0x3ffff|fix |write 0x5555
--SNROM area -- odd -----------------
$8000-$bfff|0x00000-0x03fff|fix |write 0x2aaa
$c000-$ffff|n * 0x4000|odd  0x01|write 0x5555 + write area
--SUROM area -- even ----------------
$8000-$bfff|n * 0x4000|even 0x20|write 0x2aaa + write area
$c000-$ffff|0x7c000-0x7ffff|fix |write 0x5555
--SUROM area -- odd -----------------
$8000-$bfff|0x40000-0x43fff|fix |write 0x2aaa
$c000-$ffff|n * 0x4000|odd  0x21|write 0x5555 + write area
*/
function program_initalize(d, cpu_banksize, ppu_banksize)
{
	cpu_write(d, 0x8000, 0x80);
	cpu_command(d, 0, 0x8000, cpu_banksize);
	cpu_command(d, 0x2aaa, 0x8000, cpu_banksize);
	cpu_command(d, 0x5555, 0xc000, cpu_banksize);
	mmc1_write(d, 0x8000, 0x0c);
	mmc1_write(d, 0xe000, 0x10); //cpubank #0
	mmc1_write(d, 0xa000, 0); //ROM area 1st 2M
}

function cpu_transfer(d, start, end, cpu_banksize)
{
	local wram = 1 << 4; //W-RAM disable flag
	for(local k = 0; k < 0x20; k += 0x10){
		mmc1_write(d, 0xa000, k);
		for(local i = 0; i < 0x10; i += 2){
			//even page
			mmc1_write(d, 0x8000, 0x0c);
			mmc1_write(d, 0xe000, i | 0 | wram);
			cpu_program(d, 0x8000, cpu_banksize);
			
			//odd page
			mmc1_write(d, 0x8000, 0x08);
			mmc1_write(d, 0xe000, i | 1 | wram);
			cpu_program(d, 0xc000, cpu_banksize);
		}
	}
}

function ppu_transfer(d, start, end, bank)
{
}
